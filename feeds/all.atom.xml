<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>modimore.net</title><link href="https://www.modimore.net/" rel="alternate"></link><link href="https://www.modimore.net/feeds/all.atom.xml" rel="self"></link><id>https://www.modimore.net/</id><updated>2018-07-24T00:00:00-04:00</updated><entry><title>Node's contribution to JavaScript</title><link href="https://www.modimore.net/articles/nodes-contribution-to-javascript.html" rel="alternate"></link><published>2018-07-24T00:00:00-04:00</published><updated>2018-07-24T00:00:00-04:00</updated><author><name>Quinn Mortimer</name></author><id>tag:www.modimore.net,2018-07-24:/articles/nodes-contribution-to-javascript.html</id><summary type="html">&lt;p&gt;Thinking about JavaScript a couple of years ago, it was difficult to
determine what was part of JS as a language and what was part of the
API it exposed in the browser. JavaScript, in contrast to a lot of
other languages, was used in one environment and built specifically …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Thinking about JavaScript a couple of years ago, it was difficult to
determine what was part of JS as a language and what was part of the
API it exposed in the browser. JavaScript, in contrast to a lot of
other languages, was used in one environment and built specifically
for that environment, the web. That can be seen in the way JavaScript
has been taught too. Consider a theoretical book for learning JS,
where the index looks kind of like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Variables&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Functions&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Document&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Window&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;jQuery&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Prototype&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;based&lt;/span&gt; &lt;span class="n"&gt;Programming&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;An unfortunate side-effect of which is that for a lot of people it's
difficult to define JavaScript outside of the browser context, and
to say what is part of JavaScript versus what is part of APIs
implemeted by the browser. JavaScript definitely has a specification,
but historically there hasn't been too much value in considering 
what was the language and the standard library and what was the
browser. Some stuff clearly disappears; the Window API, the Document
API, and HTML elements, all gone. But maybe some of that was good,
and JavaScript could carve out a niche in scripting for other tree-
like document formats. That could be a practical use of a language
that is already used for similar tasks, but it wouldn't help us
evaluate JavaScript as a general purpose language. For that we
would need something that allowed JavaScript to tackle a dissimilar
problem domain. That's what NodeJS does when it puts JavaScript on
the other side of the client-server relationship.&lt;/p&gt;
&lt;p&gt;Server-side JavaScript has allowed us to ask what the core parts of
JavaScript are and what was needed for it to function as a
general-purpose language. It has allowed JavaScript to find other
niches and allowed programmers to use JavaScript in ways not common
in the browser. The uses that JavaScript sees are commonly
web-adjacent. Somewhat unsurpisingly stateless transactional
communication has turned out to be one of JavaScript's strengths,
not just something that was done alongside DOM manipulation in the
browser. The JS object model is good for flyweight API endpoints
and RPC. First-class functions makes the use of various existing
frameworks as easy as passing a function definition into one of the
framework's functions. Event-driven programming is even still
present, and the runtime being event-loop based is a deliberate and
important decision for Node's runtime. The default mode being
event-loop based is a strong statement that one of the good things
about JavaScript is that it facilitates event-driven programming.&lt;/p&gt;
&lt;p&gt;NodeJS is also notable for its &lt;code&gt;require&lt;/code&gt; functionality, which is
completely unlike the traditional method of using different
JavaScript files in the browser. A convenient way for your code
to reference and rely on external libraries and objects is the
difference between a language that can only support glue scripts
and a language that you can write applications in. In the
browser, the basic way you have of doing this is effectively
just concatenating all the scripts you need something from
together. Node's &lt;code&gt;require&lt;/code&gt; and packaging ecosystem in general
are a big step up from the bare minimum web developers have
generally had. We're seeing developments in the browser in this
area too, such as &lt;a href="https://requirejs.org/"&gt;RequireJS&lt;/a&gt; and
ES6 modules with the import statement.&lt;/p&gt;
&lt;p&gt;Everything developed for Node isn't necessarily going to be
appropriate to put back into client-side JavaScript. The APIs
for local filesystem access are inappropriate for the web, as
are foreign function interfaces. That's okay though because how
it's expanded what JavaScript programmer's and everyone else
sees in JavaScript is perhaps it's biggest contribution to the
language.&lt;/p&gt;</content><category term="Programming"></category><category term="JavaScript"></category></entry><entry><title>The Lost Roots of JavaScript</title><link href="https://www.modimore.net/articles/the-lost-roots-of-javascript.html" rel="alternate"></link><published>2018-07-16T00:00:00-04:00</published><updated>2018-07-16T00:00:00-04:00</updated><author><name>Quinn Mortimer</name></author><id>tag:www.modimore.net,2018-07-16:/articles/the-lost-roots-of-javascript.html</id><summary type="html">&lt;p&gt;JavaScript has always been an interesting language. Its unique position as the
programming language of the web has something to do with its popularity, but I
think its creators also deserve credit for language design decisions made in
designing the language.&lt;/p&gt;
&lt;p&gt;In practicality, JavaScript is at the forefront of multi-paradigm …&lt;/p&gt;</summary><content type="html">&lt;p&gt;JavaScript has always been an interesting language. Its unique position as the
programming language of the web has something to do with its popularity, but I
think its creators also deserve credit for language design decisions made in
designing the language.&lt;/p&gt;
&lt;p&gt;In practicality, JavaScript is at the forefront of multi-paradigm programming.
For many developers I bet JavaScript was the first language they used
functional programming in. In the classical, recognizable sense this is
true with features like &lt;code&gt;Array.prototype.map&lt;/code&gt;, &lt;code&gt;Array.prototype.reduce&lt;/code&gt;, and
the like, but it's commonly used at the basic level of a function being passed
around as a first-class object. Without really being clued in to what
functional programming is, people will learn some of the event processing
facilities useful for web development. the window "load" event and button
"click" event are common examples of events beginners learn about early on.&lt;/p&gt;
&lt;p&gt;JavaScript is also a lot of people's introduction to reflective programming,
which is really so accessible in JavaScript that a lot of people don't really
think of it too much when doing it, at least at first.&lt;/p&gt;
&lt;p&gt;Perhaps the most interesting feature of JavaScript is the prototype-based
object model JavaScript uses. It's the only popular modern language to go this
route, but it works for it. Especially considering how ubiquitous class-based
object-oriented became on server-side langauges during JavaScript's lifetime
this is impressive. Prototype-based object-oriented puts a lot more emphasis
on objects than class-based, which to me makes it perhaps the model that
deserves the name object-oriented more. The ability to create one-off objects
with the option to add any and all desired properties at any time has been
used extensively on the web by many JavaScript libraries.&lt;/p&gt;
&lt;p&gt;There are downsides to JavaScript's object model being different to the main
competing concept. Most notably that users coming from class-based languages
often have trouble figuring out how JavaScript objects and constructors work.
JavaScript classes are I guess a response to this, and also provide a way to
make things such as HTMLElement extensible, as they aren't really JS objects.
Additionally, probably because of the bracket notation for accessing
properties, people will create an object where semantically they are
really trying to use an associative container such as JavaScript's Map,
and I've had trouble explaining to even some relatively senior developers
that the JavaScript object doesn't necessarily have the same performance
expenctations as a proper Map.&lt;/p&gt;
&lt;p&gt;Given the above it might be fair to say there are a lot of developers
who work with JavaScript but don't fully understand JavaScript. Developers
from all backgrounds too, as colleges with computer science programs seem
to invariably begin with class-based object-oriented languages and don't
really go into how JavaScript is different in say, a programming languages
course. If even these people that we consider trained, professional
developers don't get it, are we at risk for losing the sense of what
defines JavaScript?&lt;/p&gt;</content><category term="Programming"></category><category term="JavaScript"></category></entry><entry><title>BreezeBlocks 0.3.0 Release</title><link href="https://www.modimore.net/articles/breezeblocks-030-release.html" rel="alternate"></link><published>2018-05-07T00:00:00-04:00</published><updated>2018-05-07T00:00:00-04:00</updated><author><name>Quinn Mortimer</name></author><id>tag:www.modimore.net,2018-05-07:/articles/breezeblocks-030-release.html</id><summary type="html">&lt;p&gt;The other day I released &lt;a href="https://pypi.org/project/breezeblocks/0.3.0/"&gt;version 0.3.0&lt;/a&gt; of BreezeBlocks. I think
development has been going rather well, though I'm probably going to slow
down a bit on it again. Any effort I choose to put into it would probably be
better spent on documentation than features at this …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The other day I released &lt;a href="https://pypi.org/project/breezeblocks/0.3.0/"&gt;version 0.3.0&lt;/a&gt; of BreezeBlocks. I think
development has been going rather well, though I'm probably going to slow
down a bit on it again. Any effort I choose to put into it would probably be
better spent on documentation than features at this point, and of course on
using it in other stuff. This means for a while the functionality and interface
will remain essentially the same.&lt;/p&gt;
&lt;p&gt;One of the most interesting things about this project in my opinion has been
figuring out how to use object-oriented techniques to make the package while
trying to make it more readily usable with some of the other paradigms Python
supports. ORM and Active Record are some of the strongest examples of
object-oriented trying to coerce everything into its own paradigm. Hopefully
by minimizing their influence, BreezeBlocks can more easily fit in with
functional, procedural, or declarative code. Maybe others will feel the same
way.&lt;/p&gt;</content><category term="Programming"></category><category term="Python"></category><category term="SQL"></category></entry><entry><title>BreezeBlocks</title><link href="https://www.modimore.net/articles/breezeblocks.html" rel="alternate"></link><published>2018-02-18T00:00:00-05:00</published><updated>2018-02-18T00:00:00-05:00</updated><author><name>Quinn Mortimer</name></author><id>tag:www.modimore.net,2018-02-18:/articles/breezeblocks.html</id><summary type="html">&lt;p&gt;BreezeBlocks is a Python package for RDBMS-independent SQL generation. From
Python objects representing the schema of a database, you can build and execute
queries and other statements.&lt;/p&gt;
&lt;p&gt;Compared to other packages that meet a similar need, BreezeBlocks follows more
of an Active Statement model than and Active Record model. A …&lt;/p&gt;</summary><content type="html">&lt;p&gt;BreezeBlocks is a Python package for RDBMS-independent SQL generation. From
Python objects representing the schema of a database, you can build and execute
queries and other statements.&lt;/p&gt;
&lt;p&gt;Compared to other packages that meet a similar need, BreezeBlocks follows more
of an Active Statement model than and Active Record model. A SQL statement's
representation has an execute method that will handle the details of getting a
database connection and managing a transaction. The user should only need to
be responsible for shaping the statement the way they want.&lt;/p&gt;
&lt;p&gt;The source code is available on &lt;a href="https://github.com/modimore/BreezeBlocks"&gt;GitHub&lt;/a&gt;, the documentation is on
&lt;a href="https://breezeblocks.readthedocs.io/en/latest"&gt;Read the Docs&lt;/a&gt;, and it is available to download from &lt;a href="https://pypi.python.org/pypi/breezeblocks/"&gt;PyPi&lt;/a&gt;.&lt;/p&gt;</content><category term="Programming"></category><category term="Python"></category><category term="SQL"></category></entry><entry><title>Discord Dice Bot</title><link href="https://www.modimore.net/articles/discord-dice-bot.html" rel="alternate"></link><published>2018-02-18T00:00:00-05:00</published><updated>2018-02-18T00:00:00-05:00</updated><author><name>Quinn Mortimer</name></author><id>tag:www.modimore.net,2018-02-18:/articles/discord-dice-bot.html</id><summary type="html">&lt;p&gt;A while ago when Discord I was in a D&amp;amp;D group that was playing over Discord,
and we needed a good dice-roller to use in-chat. I wrote up this bot using
the &lt;a href="https://github.com/"&gt;Discord API wrapper&lt;/a&gt; for Python so we could get pseudo-random
results in-chat.&lt;/p&gt;
&lt;p&gt;That D&amp;amp;D group is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A while ago when Discord I was in a D&amp;amp;D group that was playing over Discord,
and we needed a good dice-roller to use in-chat. I wrote up this bot using
the &lt;a href="https://github.com/"&gt;Discord API wrapper&lt;/a&gt; for Python so we could get pseudo-random
results in-chat.&lt;/p&gt;
&lt;p&gt;That D&amp;amp;D group is not meeting currently, but a couple of other groups have
taken up using an instance of the bot named Pythia I keep running on Heroku.
If you'd like to have her roll dice for your group, you can do so &lt;a href="https://discordapp.com/oauth2/authorize?client_id=202861748133298177&amp;amp;scope=bot&amp;amp;permissions=3072"&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="Programming"></category><category term="Python"></category></entry></feed>